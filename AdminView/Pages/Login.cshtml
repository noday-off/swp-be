@page
@model AdminView.Pages.LoginModel
@{
    ViewData["Title"] = "Login";
    //string url = apiDomain.url;
}
<script>
    //clear the token 
    localStorage.removeItem('token');
</script>

<form method="post" class="mt-4" id="form">
    <div class="mb-3">
        <label for="username" class="form-label">Username:</label>
        <input type="text" id="username" name="username" class="form-control" required />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <input type="password" id="password" name="password" class="form-control" required />
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Log In</button>
    </div>
</form>

<script>
    $(document).ready(function() {
        $('form').submit(function(e) {
            e.preventDefault(); // Prevent the default form submission

            var username = $('#username').val();
            var password = $('#password').val();

            // Send the login request using AJAX
            $.ajax({
                url: "@apiDomain.Url" + "/auth/login",
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    username: username,
                    password: password
                }),
                success: function(response) {
                    //validate role
                    const jwt = response.token;

                    const parts = jwt.split(".");

                    if (parts.length === 3) {
                        const payload = atob(parts[1]);

                        // Parse the payload as a JSON object
                        const payloadData = JSON.parse(payload);

                        // Access the value of the "http://schemas.microsoft.com/ws/2008/06/identity/claims/role" field
                        const roleValue = payloadData["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"];

                        // Do whatever you want with the roleValue
                        console.log("Role:", roleValue);
                        if(roleValue == "Admin"){
                            localStorage.setItem('token', jwt);
                            window.location.href = '/'; // Redirect to a success page
                        }else{
                            alert("Your account is not allowed to get access to this admin application.");
                        }
                    } else {
                    alert("Invalid JWT format!");
                    }
                },
                error: function(xhr, status, error) {
                    // Handle the login error
                    var errorMessage = xhr.responseJSON && xhr.responseJSON.error ? xhr.responseJSON.error : 'Invalid username or password.';
                    $('.error-message').text(errorMessage);
                    alert(errorMessage);
                }
            });
        });
    });
</script>


